" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
" OWN ADDITION (pathogen)
execute pathogen#infect()

if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark
" set background=light

" OWN ADDITION - enable a nicer theme
" first set colors for lightline plugin
let g:lightline = {
    \ 'colorscheme': 'wombat'}

" then vim theme:
" let g:solarized_termcolors=256
let g:solarized_termtrans=1 " 0
colorscheme solarized

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" OWN ADDITIONS
"
" Spaces are better than a tab character
set expandtab
set smarttab
set autoread            " reload file changes outside vim
set autoindent		" set the cursor at same indent as line above
set smartindent		" try to be smart about indenting(C-style)
set shiftwidth=2	" spaces for each step of (auto)indent
set softtabstop=4	" set virtual tab stop (compat for 8-wide tabs)
set tabstop=8		" for proper display of files with tabs
set shiftround		" always round indents to multiple of shiftwidth
set copyindent		" use existing indents for new indents
set preserveindent	" save as much indent structure as possible

set number		" show linenumbers!!
"set ruler
set cursorline
set hlsearch		" highlight search matches
set scrolloff=3
set laststatus=2        " needed for lightline plugin to work
set noshowmode          " vim:s own infobar(insert) isnt needed with lightline

" Allow backspacing over autoindent, line breaks and start of insert action
" set backspace=indent,eol, start " TEST SOMETIME, not testet yet
set visualbell  " use visual bell instead of beeping when doing something wrong

" turn off search highlight
" nnoremap <leader><space> :nohlsearch<CR>

" Save and run python scripts with F2-key
"":map <F2> <Esc>:w<CR>:!clear; python3 %<CR>
if has("autocmd")
  autocmd FileType python nnoremap <buffer> <F2> <Esc>:w<CR> :exec '!clear;python3' shellescape(@%, 1)<CR>
endif

" Syntastic
"set statusline+=%warningmsg"
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_log_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" END OWN ADDITIONS

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

